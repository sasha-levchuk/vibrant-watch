[gd_scene load_steps=4 format=3 uid="uid://cpd7eamcb24bf"]

[ext_resource type="Texture2D" uid="uid://cn6bsncafah0h" path="res://sprites/circle white 128.png" id="1_qe6sc"]
[ext_resource type="Gradient" uid="uid://xpbru2kl8ya0" path="res://gradient.tres" id="2_iwwpu"]

[sub_resource type="GDScript" id="GDScript_ah8ox"]
resource_name = "gauge"
script/source = "extends TextureProgressBar
@export var DIVISIONS := 12
@export var big_div_freq := 4
@export var is_in_minutes := false
@export var updated_every_sec := true
@export_enum(\"week\", \"month\") var config_key: String
var offset: int
@export var is_repeating := true
@export var colors: PackedColorArray = PackedColorArray([
	Color( 1,   0,   1   ),
	Color( 0.2, 0.2, 1   ),
	Color( 0,   0.6, 0.6 ),
	Color( 0.2, 0.6, 0.2 ),
	Color( 0.8, 0.8, 0.0 ),
	Color( 1,   0,   0   )])
@export var gradient: Gradient


func _ready():
	#print( gradient.sample(0.1) )
	setup_divisions()


func setup(val: int, minutes: int):
	if is_in_minutes:
		val /= 60
	val += minutes
	if is_repeating:
		value = fmod(val, max_value)
	else:
		value = val
	update_color()


func increment():
	value += 1
	update_color()


func increment_wrapped():
	value = fmod( value+1, max_value )
	update_color()


func setup_divisions():
	if big_div_freq==0: big_div_freq=99999
	for i in range(1, DIVISIONS):
		var new_line = ($Line_Big if i%big_div_freq==0 else $Line).duplicate()
		add_child(new_line)
		new_line.rotation_degrees = i * 360 / DIVISIONS
	$Line.queue_free()
	$Line_Big.queue_free()


func soft_light(a:Color, b:Color):
	return (Color.WHITE-2*b)*a*a+2*b*a


func hard_light(a:Color ,b:Color ):
	return 2*a*b if b.get_luminance() < 0.5 else (2*a.inverted()*b.inverted()).inverted()


func overlay(a:Color, b:Color):
	return hard_light(b,a)


func update_color():
	var col := calc_color( value )
	#col = soft_light( col, global.color )
	col = col.lerp( global.color, 0.6 )
	tint_progress = col
	#tint_progress = overlay( calc_color(value), global.color )
	#tint_progress = hard_light( calc_color(value), global.color )


func calc_color(val) -> Color:
	return gradient.sample(val/max_value)
	#var a: float = (colors.size()-1) * fmod(val/max_value, 1)
	#return colors[int(a)].lerp( colors[int(a+1)], fmod(a,1))
"

[node name="Gauge" type="TextureProgressBar"]
offset_right = 128.0
offset_bottom = 128.0
value = 100.0
rounded = true
fill_mode = 4
texture_progress = ExtResource("1_qe6sc")
tint_under = Color(0, 0, 0, 1)
script = SubResource("GDScript_ah8ox")
colors = PackedColorArray(0.627451, 0.282353, 1, 1, 0, 0.533333, 1, 1, 0.258824, 0.831373, 0.258824, 1, 0.780392, 0.780392, 0.109804, 1, 1, 0.0666667, 0.286275, 1)
gradient = ExtResource("2_iwwpu")

[node name="Line" type="Line2D" parent="."]
position = Vector2(64, 64)
points = PackedVector2Array(0, 0, 0, -63)
width = 2.0
default_color = Color(0, 0, 0, 0.372549)

[node name="Line_Big" type="Line2D" parent="."]
position = Vector2(64, 64)
points = PackedVector2Array(0, 0, 0, -63)
width = 3.0
default_color = Color(0, 0, 0, 0.752941)
