[gd_scene load_steps=11 format=3 uid="uid://f1vvoqdrimh7"]

[ext_resource type="Texture2D" uid="uid://6bxdrswetq2b" path="res://sprites/circle black 128.png" id="1_7mycd"]
[ext_resource type="Texture2D" uid="uid://cn6bsncafah0h" path="res://sprites/circle white 128.png" id="1_h2yge"]
[ext_resource type="PackedScene" uid="uid://cpd7eamcb24bf" path="res://gauge.tscn" id="1_lq88f"]

[sub_resource type="GDScript" id="GDScript_eu11m"]
resource_name = "main"
script/source = "extends Node2D
var config: ConfigFile = ConfigFile.new()
var CONFIG_PATH: String = \"res://config.cfg\"
var error: int = config.load(CONFIG_PATH) # == OK:

@onready var window: Window = get_window()
@onready var seconds: int = config.get_value(\"time\", \"seconds\", 0)
@export var label: Label
@export var gauges: Array[TextureProgressBar]
var is_dragging := false

signal on_every_second
signal on_every_minute


func _ready():
	check_date()
	global.color = gauges[0].calc_color(seconds)
	label.update(seconds)
	for gauge in gauges:
		gauge.setup(seconds, config.get_value(\"totals\",gauge.config_key,0))
		if gauge.updated_every_sec:
			on_every_second.connect(gauge.increment_wrapped)
		else:
			on_every_minute.connect(gauge.increment)

	Engine.max_fps = 1
	var pos: Vector2i = config.get_value(\"window\", \"position\", Vector2i(1700,900))
	for screen in DisplayServer.get_screen_count():
		var rect: Rect2i = DisplayServer.screen_get_usable_rect(screen)
		if rect.has_point(pos):
			window.position = pos
			break


func _input(event:InputEvent):
	if event.is_action(\"space\") and event.pressed:
		var should_pause: bool = not %PauseButton.is_pressed()
		%PauseButton.set_visible(true)
		%PauseButton.set_pressed(should_pause)
		set_paused(should_pause)
		%PanelPaused.set_visible(should_pause)
		%PauseButton.set_visible(false)


func debug( s:String, s2 := \"\" ):
	prints(s, s2)
	%DebugLabel.text += s + \" \" + s2 + \"\\n\"


func check_date():
	var new_date := Time.get_date_string_from_system()
	var prev_date:String = config.get_value(\"time\", \"date\", \"\")
	if new_date == prev_date: return
	
	var minutes := int(roundf(seconds/60.0))
	config.set_value(\"past_dates\", prev_date, minutes)
	config.set_value(\"totals\", \"week\", 
		config.get_value(\"totals\", \"week\", 0) + minutes)
	config.set_value(\"totals\", \"month\", 
		config.get_value(\"totals\", \"month\", 0) + minutes)
	
	var weekday:int = Time.get_date_dict_from_system().weekday
	if weekday==0: weekday=7
	var prev_weekday:int = config.get_value(\"time\", \"weekday\", 8)
	if weekday < prev_weekday:
		config.set_value(\"totals\", \"week\", 0)
	config.set_value(\"time\", \"weekday\", weekday)
	
	var month: int = Time.get_date_dict_from_system().month
	var prev_month: int = config.get_value(\"time\", \"month\", 13)
	if month != prev_month:
		config.set_value(\"time\", \"month\", month)
		config.set_value(\"totals\", \"month\", 0)
	
	seconds = 0
	config.set_value(\"time\", \"date\", new_date)
	save_cfg()


func _process( _delta ):
	seconds += 1
	on_every_second.emit()
	if seconds%60 == 0:
		global.color = gauges[0].calc_color(seconds)
		label.update(seconds)
		on_every_minute.emit()
		save_cfg()


func _notification( what: int ):
	#print(what)
	match what:
		# 17: seems to fire upon every update?
		1012: # when window is moved upon taskbar changes
			window.position = config.get_value(\"window\", \"position\")
		#NOTIFICATION_APPLICATION_FOCUS_IN:
			#print(\"focus in!\")
		#NOTIFICATION_APPLICATION_FOCUS_OUT:
			#print(\"focus out!\")
		NOTIFICATION_WM_CLOSE_REQUEST:
			quit()


func quit():
	save_cfg()
	get_tree().quit() # default behavior


func on_unhover():
	if %DragButton.is_dragging: return
	if %PauseButton.button_pressed: return
	set_paused( false )


func set_paused( should_pause: bool ):
	set_process( not should_pause )
	Engine.max_fps = 0 if should_pause else 1


func reset_time():
	seconds = 0
	config.set_value(\"time\", \"seconds\", 0)
	config.save( CONFIG_PATH )
	update_gauges()


func update_gauges():
	global.color = gauges[0].calc_color(seconds)
	label.update(seconds)
	for gauge in gauges:
		gauge.setup(seconds, config.get_value(\"totals\",gauge.config_key,0))


func adjust_time( val: int ):
	seconds += val
	update_gauges()


func save_cfg():
	config.set_value(\"window\", \"position\", window.position )
	config.set_value(\"time\", \"seconds\", seconds)
	config.save( CONFIG_PATH )
"

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_h2yge"]
bg_color = Color(0, 0, 0, 1)
corner_radius_top_left = 6
corner_radius_top_right = 6
corner_radius_bottom_right = 6
corner_radius_bottom_left = 6

[sub_resource type="LabelSettings" id="LabelSettings_5xex3"]
resource_local_to_scene = true
resource_name = "min"
font_size = 18

[sub_resource type="GDScript" id="GDScript_h2yge"]
resource_name = "label"
script/source = "extends Label


func update(seconds):
	text = Time.get_time_string_from_unix_time(seconds).substr(0,5).trim_prefix('0')
	label_settings.font_color = global.color.lightened(0.2)
"

[sub_resource type="GDScript" id="GDScript_1bvp3"]
resource_name = "controls"
script/source = "extends Control


func _ready():
	show()
	for node:Control in get_children():
		mouse_entered.connect( Callable(node,\"show\") )
		mouse_exited.connect( Callable(node,\"hide\") )
		node.hide()
"

[sub_resource type="GDScript" id="GDScript_xqv6w"]
resource_name = "drag_button"
script/source = "extends Button
var drag_offset: Vector2i
@onready var win: Window = get_window()
var is_dragging := false
signal button_released_drag


func _ready():
	set_process(false)
	set_process_input(false)


func _on_button_down():
	is_dragging = true
	set_process_input(true)
	drag_offset = DisplayServer.mouse_get_position() - win.position
	set_process(true)


func _process(_delta):
	win.position = DisplayServer.mouse_get_position() - drag_offset



func _input(event:InputEvent):
	if not event is InputEventMouseButton: return
	if not event.is_released(): return
	if not event.button_index == 1: return
	
	set_process(false)
	set_process_input(false)
	is_dragging = false
	button_released_drag.emit()
"

[sub_resource type="LabelSettings" id="LabelSettings_h2yge"]
font_size = 10

[node name="Main" type="Node2D" node_paths=PackedStringArray("label", "gauges")]
script = SubResource("GDScript_eu11m")
label = NodePath("Label")
gauges = [NodePath("gauge hours"), NodePath("gauge minutes"), NodePath("gauge seconds"), NodePath("gauge week"), NodePath("gauge month")]

[node name="Panel2" type="Sprite2D" parent="."]
modulate = Color(0, 0, 0, 1)
texture = ExtResource("1_h2yge")
offset = Vector2(64, 64)

[node name="gauge month" parent="." instance=ExtResource("1_lq88f")]
scale = Vector2(0.96, 0.96)
pivot_offset = Vector2(64, 64)
max_value = 10560.0
value = 6666.0
tint_under = Color(0.05, 0.05, 0.05, 1)
tint_progress = Color(0, 0.486275, 1, 1)
DIVISIONS = 22
big_div_freq = 5
is_in_minutes = true
updated_every_sec = false
config_key = "month"
is_repeating = false
metadata/_edit_pinned_properties_ = [&"max_value"]

[node name="background sprite2" type="Sprite2D" parent="."]
modulate = Color(0, 0, 0, 1)
position = Vector2(64, 64)
scale = Vector2(0.92, 0.92)
texture = ExtResource("1_h2yge")

[node name="gauge week" parent="." instance=ExtResource("1_lq88f")]
clip_children = 2
scale = Vector2(0.9, 0.9)
pivot_offset = Vector2(64, 64)
max_value = 2400.0
value = 2222.0
tint_under = Color(0.05, 0.05, 0.05, 1)
tint_progress = Color(0, 0.486275, 1, 1)
DIVISIONS = 40
big_div_freq = 8
is_in_minutes = true
updated_every_sec = false
config_key = "week"
is_repeating = false

[node name="background sprite3" type="Sprite2D" parent="."]
position = Vector2(64, 64)
scale = Vector2(0.85, 0.85)
texture = ExtResource("1_7mycd")

[node name="gauge seconds" parent="." instance=ExtResource("1_lq88f")]
scale = Vector2(0.78, 0.78)
pivot_offset = Vector2(64, 64)
max_value = 60.0
value = 60.0
DIVISIONS = 60
big_div_freq = 5

[node name="background sprite4" type="Sprite2D" parent="."]
position = Vector2(64, 64)
scale = Vector2(0.72, 0.72)
texture = ExtResource("1_7mycd")

[node name="gauge minutes" parent="." instance=ExtResource("1_lq88f")]
scale = Vector2(0.7, 0.7)
pivot_offset = Vector2(64, 64)
max_value = 3600.0
value = 2171.0
tint_under = Color(0.05, 0.05, 0.05, 1)
tint_progress = Color(0.756863, 1, 0.2, 1)
big_div_freq = 0

[node name="background sprite5" type="Sprite2D" parent="."]
position = Vector2(64, 64)
scale = Vector2(0.5, 0.5)
texture = ExtResource("1_7mycd")

[node name="gauge hours" parent="." instance=ExtResource("1_lq88f")]
clip_children = 2
scale = Vector2(0.48, 0.48)
pivot_offset = Vector2(64, 64)
max_value = 28800.0
value = 22222.0
tint_under = Color(0.05, 0.05, 0.05, 1)
tint_progress = Color(0, 0.486275, 1, 1)
DIVISIONS = 8
big_div_freq = 0

[node name="Panel" type="Panel" parent="."]
offset_left = 42.0
offset_top = 54.0
offset_right = 86.0
offset_bottom = 76.0
theme_override_styles/panel = SubResource("StyleBoxFlat_h2yge")

[node name="Label" type="Label" parent="."]
clip_children = 2
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_right = 128.0
offset_bottom = 128.0
grow_horizontal = 2
grow_vertical = 2
text = "2:34"
label_settings = SubResource("LabelSettings_5xex3")
horizontal_alignment = 1
vertical_alignment = 1
script = SubResource("GDScript_h2yge")

[node name="PanelPaused" type="Sprite2D" parent="."]
unique_name_in_owner = true
visible = false
self_modulate = Color(0.162066, 0.162066, 0.162066, 0.862745)
z_index = 1
position = Vector2(64, 64)
scale = Vector2(0.97, 0.97)
texture = ExtResource("1_h2yge")

[node name="Controls" type="Control" parent="."]
unique_name_in_owner = true
visible = false
z_index = 2
layout_mode = 3
anchors_preset = 0
offset_top = 1.0
offset_right = 128.0
offset_bottom = 128.0
script = SubResource("GDScript_1bvp3")

[node name="ResetButton" type="Button" parent="Controls"]
layout_mode = 0
offset_left = 15.0
offset_top = 31.0
offset_right = 38.0
offset_bottom = 62.0
mouse_filter = 1
keep_pressed_outside = true
text = "↺"

[node name="DragButton" type="Button" parent="Controls"]
unique_name_in_owner = true
layout_mode = 0
offset_left = 65.0
offset_top = 31.0
offset_right = 88.0
offset_bottom = 62.0
mouse_filter = 1
keep_pressed_outside = true
text = "↔"
script = SubResource("GDScript_xqv6w")

[node name="Label" type="Label" parent="Controls/DragButton"]
layout_mode = 0
offset_left = 7.0
offset_top = 4.0
offset_right = 47.0
offset_bottom = 27.0
text = "↕"

[node name="QuitButton" type="Button" parent="Controls"]
layout_mode = 0
offset_left = 90.0
offset_top = 31.0
offset_right = 113.0
offset_bottom = 62.0
mouse_filter = 1
keep_pressed_outside = true
text = "⨯"

[node name="PauseButton" type="Button" parent="Controls"]
unique_name_in_owner = true
layout_mode = 0
offset_left = 40.0
offset_top = 31.0
offset_right = 63.0
offset_bottom = 62.0
mouse_filter = 1
toggle_mode = true
keep_pressed_outside = true
text = "ll"

[node name="SkipBackButton" type="Button" parent="Controls"]
layout_mode = 0
offset_left = 15.0
offset_top = 64.0
offset_right = 38.0
offset_bottom = 95.0
tooltip_text = "skip 5 minutes back"
mouse_filter = 1
keep_pressed_outside = true
text = "↶"

[node name="SkipAheadButton" type="Button" parent="Controls"]
layout_mode = 0
offset_left = 40.0
offset_top = 64.0
offset_right = 63.0
offset_bottom = 95.0
tooltip_text = "skip 5 minutes ahead"
mouse_filter = 1
keep_pressed_outside = true
text = "↷"

[node name="SaveButton" type="Button" parent="Controls"]
layout_mode = 0
offset_left = 65.0
offset_top = 64.0
offset_right = 88.0
offset_bottom = 95.0
mouse_filter = 1
keep_pressed_outside = true
text = "🖫"

[node name="DebugLabel" type="Label" parent="."]
unique_name_in_owner = true
offset_right = 40.0
offset_bottom = 23.0
label_settings = SubResource("LabelSettings_h2yge")

[connection signal="ready" from="PanelPaused" to="PanelPaused" method="hide"]
[connection signal="mouse_entered" from="Controls" to="." method="set_paused" binds= [true]]
[connection signal="mouse_exited" from="Controls" to="." method="on_unhover"]
[connection signal="button_down" from="Controls/ResetButton" to="." method="reset_time"]
[connection signal="button_down" from="Controls/DragButton" to="Controls/DragButton" method="_on_button_down"]
[connection signal="button_released_drag" from="Controls/DragButton" to="." method="save_cfg"]
[connection signal="button_down" from="Controls/QuitButton" to="." method="quit"]
[connection signal="toggled" from="Controls/PauseButton" to="PanelPaused" method="set_visible"]
[connection signal="pressed" from="Controls/SkipBackButton" to="." method="adjust_time" binds= [-300]]
[connection signal="pressed" from="Controls/SkipAheadButton" to="." method="adjust_time" binds= [300]]
[connection signal="pressed" from="Controls/SaveButton" to="." method="save_cfg"]
